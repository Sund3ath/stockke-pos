type OrderItem {
  id: ID!
  productId: String!
  productName: String!
  quantity: Int!
  price: Float!
  taxRate: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Order {
  id: ID!
  products: [Product!]!
  items: [OrderItem!]!
  total: Float!
  status: String!
  timestamp: String!
  paymentMethod: String!
  cashReceived: Float
  tableId: String
  table: Table
  user: User!
  userId: ID!
  createdAt: String!
  updatedAt: String!
}

enum OrderStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

type ExternalOrder {
  id: ID!
  items: [OrderItem!]!
  total: Float!
  status: OrderStatus!
  createdAt: DateTime!
  adminUserId: ID!
  customerNote: String
}

input OrderItemInput {
  productId: ID!
  quantity: Int!
  price: Float!
  taxRate: Float
}

input CreateOrderInput {
  items: [OrderItemInput!]!
  total: Float!
  status: String! # pending, completed, cancelled, parked
  timestamp: String
  paymentMethod: String!
  cashReceived: Float
  tableId: String
  id: ID # Optional: Wenn eine ID angegeben ist, wird die Bestellung aktualisiert
}

input UpdateOrderInput {
  items: [OrderItemInput!]
  total: Float
  status: String
  timestamp: String
  paymentMethod: String
  cashReceived: Float
  tableId: String
}

input CreateExternalOrderInput {
  items: [OrderItemInput!]!
  total: Float!
  adminUserId: ID!
  customerNote: String
}

extend type Query {
  orders: [Order!]!
  order(id: ID!): Order
}

extend type Mutation {
  createOrder(input: CreateOrderInput!): Order!
  updateOrder(id: ID!, input: UpdateOrderInput!): Order!
  updateOrderStatus(id: ID!, status: String!): Order!
  createExternalOrder(input: CreateExternalOrderInput!): ExternalOrder!
}